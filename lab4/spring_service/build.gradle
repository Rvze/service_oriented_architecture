plugins {
    id 'java'
    id("org.springframework.boot") version "3.1.5"
    id("io.spring.dependency-management") version "1.1.3"
    id("io.freefair.aspectj") version "5.1.1"

}

configurations {
    jaxb
}

bootJar {
    archiveBaseName = 'gen'
    archiveVersion = '0.1.0'
}

group = "com.example"
version = "latest"

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-web")

    implementation("org.liquibase:liquibase-core")
    compileOnly("org.projectlombok:lombok")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly("org.postgresql:postgresql")
    annotationProcessor("org.projectlombok:lombok")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    /**
     * Spring validation
     */
    implementation("org.springframework.boot:spring-boot-starter-validation")
    /**
     * Mapstruct
     */
    implementation("org.mapstruct:mapstruct:1.5.5.Final")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
    /**
     * Swagger
     */
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0")
    /**
     * Aspectj
     */
    implementation("org.aspectj:aspectjrt:1.9.21")
    /**
     * Web services
     */
    implementation("org.springframework.boot:spring-boot-starter-web-services")

    /**
     * wsdl4j
     */
    implementation("wsdl4j:wsdl4j")

    /**
     * jakarta xml
     */
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.0")

    /**
     * jaxb runtime
     */
    jaxb("org.glassfish.jaxb:jaxb-xjc")
}

tasks.named('test') {
    useJUnitPlatform()


}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated-sources/jaxb'
        }
    }
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.schema = "src/main/resources/schema.xsd"

    outputs.dir sourcesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}

compileJava.dependsOn genJaxb